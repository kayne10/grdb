diff --git a/src/db/component_sssp.c b/src/db/component_sssp.c
index 0691434..932908b 100644
--- a/src/db/component_sssp.c
+++ b/src/db/component_sssp.c
@@ -1,33 +1,272 @@
+#include <assert.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <limits.h>
+#include "cli.h"
 #include "graph.h"
+#define INT_type 4
+#define inf INT_MAX
+#define min(x, y) (((x) < (y)) ? (x) : (y)) // this function is used for finding smallest edge for Dikstra
 
+/* find int data type from edge schema */
+attribute_t component_find_int_tuple(attribute_t a)
+{
+    attribute_t attr;
+    assert (a != NULL);
+    for(attr = a; attr != NULL; attr = attr->next){
+        if(attr->bt == INT_type)
+            return attr;
+    }
+
+    return NULL;
+}
+
+/* get number of vertices in component c */
+int get_num_of_vertices_in_component(component_t c){
+    ssize_t size, len;
+    char* buf;
+    off_t off;
+    int readlen, count;
+    if (c->sv == NULL)
+        size = 0;
+    else
+        size = schema_size(c->sv);
+    readlen = sizeof(vertexid_t) + size;
+    buf = malloc(readlen);
+    count = 0;
+    for (off = 0;; off += readlen) {
+        lseek(c->vfd, off, SEEK_SET);
+        len = read(c->vfd, buf, readlen);
+        if (len <= 0)
+            break;
+        (count) ++;
+    }
+    free(buf);
+    return count;
+}
+
+/* appending all vertex ids in component c to a malloced list  */
+void get_component_vertices(component_t c, vertexid_t *list){
+    ssize_t size, len;
+    int readlen;
+    char* buf;
+    off_t off;
+    vertexid_t v;
+    int i;
+    if (c->sv == NULL)
+        size = 0;
+    else
+        size = schema_size(c->sv);
+    readlen = sizeof(vertexid_t) + size;
+    buf = malloc(readlen);
+    for (i = 0,off = 0;; i++, off += readlen) {
+        lseek(c->vfd, off, SEEK_SET);
+        len = read(c->vfd, buf, readlen);
+        if (len <= 0)
+            break;
 
-/* Place the code for your Dijkstra implementation in this file */
+        v = *((vertexid_t *) buf);
+        list[i] = v;
+    }
+    free(buf);
+}
+
+/* get weight of an edge */
+int get_weight_of_edge(component_t c, vertexid_t v1, vertexid_t v2, char* attr_name){
+    struct edge e;
+    edge_t e1;
+    int offset, weight;
+    edge_init(&e);
+    edge_set_vertices(&e, v1, v2);
+    e1 = component_find_edge_by_ids(c, &e);
+    if(e1 == NULL){
+        return inf;
+    }
+    offset = tuple_get_offset(e1->tuple, attr_name);
+    weight = tuple_get_int(e1->tuple->buf + offset);
+    return weight;
+}
 
+/* get the malloc list of vertex id */
+int get_index_from_id(vertexid_t id, vertexid_t* list,int count){
+    for(int i = 0; i < count; i++){
+        if(list[i] == id){
+            return i;
+        }
+    }
+    return -1;
+}
 
-int
-component_sssp(
+/* find shortest path in component c */
+int component_sssp(
         component_t c,
-        vertexid_t v1,
-        vertexid_t v2,
+        vertexid_t start,
+        vertexid_t end,
         int *n,
         int *total_weight,
         vertexid_t **path)
 {
-	
-	/*
-	 * Figure out which attribute in the component edges schema you will
-	 * use for your weight function
-	 */
-
-
+    /* parameter error callback */
+    if(start != 1){
+        printf("You must assign starting vertex = 1\n");
+        return -1;
+    }
+    else if(start == end){
+        printf("No path exists between %llu and %llu\n", start, end);
+        return -1;
+    }
+    int number_of_vertices;
+    vertexid_t *s_list;
+    vertexid_t *sssp_list;
+    int s_list_count;
+    int sssp_list_count;
+    vertexid_t *vertex_list;
+    int *cost_list;
+    vertexid_t *parent_list;
 
-	/*
-	 * Execute Dijkstra on the attribute you found for the specified
-	 * component
-	 */
+    c->efd = edge_file_init(gno, cno);
+    c->vfd = vertex_file_init(gno, cno);
 
+    attribute_t weight_attr;
+    weight_attr = component_find_int_tuple(c->se->attrlist);
+    if(!weight_attr){
+        printf("No integer attributes found\n");
+        return -1;
+    }
 
+    /* find the size of the malloc list */
+    number_of_vertices = get_num_of_vertices_in_component(c);
+    parent_list = malloc(number_of_vertices * sizeof(vertexid_t));
+    vertex_list = malloc(number_of_vertices * sizeof(vertexid_t));
+    cost_list = malloc(number_of_vertices * sizeof(int));
+    sssp_list = malloc(number_of_vertices * sizeof(int));
 
-	/* Change this as needed */
-	return (-1);
+    get_component_vertices(c, vertex_list);
+    for(int i = 0; i < number_of_vertices; i++){
+        cost_list[i] = inf;
+        parent_list[i] = inf;
+    }
+    /* traversing */
+    int start_index;
+    int end_index;
+    int min_index;
+    int min;
+    int in_vs;
+    vertexid_t w, v;
+    /* get start and end vertices in c */
+    start_index = -1;
+    end_index = -1;
+    for(int k = 0; k < number_of_vertices; k++){
+        if(vertex_list[k] == start)
+            start_index = k;
+        if(vertex_list[k] == end)
+            end_index = k;
+    }
+    if(start_index == -1 || end_index == -1){
+        printf("Could not find Start or End, please specify two vertices that exist\n");
+        return -1;
+    }
+    for(int i = 1; i < number_of_vertices; i++){
+        int temp_weight = get_weight_of_edge(c, start, vertex_list[i], weight_attr->name);
+        if(temp_weight != inf){
+            parent_list[i] = start;
+        }
+        else if(temp_weight <= 0){
+            printf("Zero or Negative weight value indicated\n");
+            return -1;
+        }
+    }
+    /* start traversal */
+    for(int i = 1; i < number_of_vertices; i++){
+        /* initialize s list with starting vertex */
+        s_list = malloc(number_of_vertices * sizeof(vertexid_t));
+        s_list[0] = start;
+        s_list_count = 1;
+        cost_list[i] = get_weight_of_edge(c, start, vertex_list[i], weight_attr->name);
+        /* use min weight */
+        min = inf;
+        for(int j = 0; j < number_of_vertices; j++){
+            in_vs = 1;
+            for(int k = 0; k < s_list_count; k++){
+                if(vertex_list[j] == s_list[k])
+                    in_vs = 0;
+            }
+            /* find min */
+            if(in_vs){
+                if(cost_list[j] < min){
+                    min_index = j;
+                }
+            }
+            else{
+                continue;
+            }
+            w = j;
+            s_list[s_list_count] = vertex_list[w];
+            s_list_count++;
+            /* check if edge exists on shortest path */
+            for(int l = 0; l < number_of_vertices; l++){
+                v = l;
+                in_vs = 1;
+                for(int m = 0; m < s_list_count; m++){
+                    if(vertex_list[v] == s_list[m])
+                        in_vs = 0;
+                }
+                if(in_vs){
+                    int c_wv = get_weight_of_edge(c, vertex_list[w], vertex_list[v], weight_attr->name);
+                    if(cost_list[w] == inf || c_wv == inf){
+                        cost_list[v] = min(cost_list[v], inf);
+                    }
+                    else{
+                        if(cost_list[w] + c_wv < cost_list[v]){
+                            parent_list[v] = vertex_list[w];
+                            cost_list[v] = cost_list[w] + c_wv;
+                        }
+                    }
+                }
+            }
+        }
+    }
+#if _DEBUG
+    printf("Cost List: [");
+    for(int n = 0; n < number_of_vertices; n++){
+        if(n != (number_of_vertices - 1))
+            printf("%d,", cost_list[n]);
+        else
+            printf("%d", cost_list[n]);
+    }
+    printf("]\n");
+    parent_list[start_index] = 0;
+    printf("Parent List : [");
+    for(int n = 0; n < number_of_vertices; n++){
+        if(n != (number_of_vertices - 1))
+            printf("%llu,", parent_list[n]);
+        else
+            printf("%llu", parent_list[n]);
+    }
+    printf("]\n");
+#endif
+    sssp_list[0] = end;
+    sssp_list_count = 1;
+    for(vertexid_t temp = parent_list[end_index]; temp != start; temp = parent_list[get_index_from_id(temp, vertex_list, number_of_vertices)]){
+        sssp_list[sssp_list_count] = temp;
+        sssp_list_count++;
+    }
+    sssp_list[sssp_list_count] = start;
+    sssp_list_count++;
+    printf("The shortest path between %llu and %llu has a cost value of: %d\n", start, end, cost_list[end_index]);
+    printf("SSSP: [");
+    for(int n = sssp_list_count-1; n >= 0; n--){
+        if(n != 0)
+            printf("%llu,", sssp_list[n]);
+        else
+            printf("%llu", sssp_list[n]);
+    }
+    printf("]\n");
+    /* free vectors from memory */
+    free(parent_list);
+    free(vertex_list);
+    free(cost_list);
+    free(sssp_list);
+    free(s_list);
+    return (1);
 }
